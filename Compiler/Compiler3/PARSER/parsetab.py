
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD ASSIGN BOOLEAN CHARACTER CLASS CLOSEAKOL CLOSEBRACKET CLOSEPAR COMMA DIVIDE DOT DOUBLE ELSE EQUALS FALSE FLOAT FOR GREATEREQUAL GREATERTHAN ID IF INT LESSEQUAL LESSTHAN MEQUAL MINUS MULT NEW NOTEQUAL NULL NUMBER OPENAKOL OPENBRACKET OPENPAR PEQUAL PLUSPLUS PRIVATE PUBLIC RETURN SEMI STATIC STRING THIS TRUE VOID WHILEPROGRAM : ZZ : CLASSDECLARATION Z\n       Z : EMPTYCLASSDECLARATION : CLASS ID OPENAKOL A CLOSEAKOLA : FIELDDECLARATION A\n         | METHODDECLARATION A\n         | EMPTYFIELDDECLARATION : DECLARATORS ID SEMIMETHODDECLARATION : DECLARATORS ID OPENPAR PARAMERERLIST CLOSEPAR OPENAKOL B RETURN EXPRESSION SEMI CLOSEAKOL\n       METHODDECLARATION : DECLARATORS ID OPENPAR CLOSEPAR OPENAKOL B RETURN EXPRESSION SEMI CLOSEAKOL\n       METHODDECLARATION : DECLARATORS ID OPENPAR PARAMERERLIST CLOSEPAR OPENAKOL B CLOSEAKOL\n       METHODDECLARATION : DECLARATORS ID OPENPAR  CLOSEPAR OPENAKOL B CLOSEAKOLB : STATEMENT B\n         | EMPTYDECLARATORS : C STATIC TYPE\n       DECLARATORS : STATIC TYPE\n       DECLARATORS : C TYPE\n       DECLARATORS : TYPEC : PUBLIC\n       C : PRIVATEEMPTY :TYPE : PRIMTYPE\n       TYPE : CLASSTYPE\n       TYPE : ARRTYPEPRIMTYPE : INT\n       PRIMTYPE : BOOLEAN\n       PRIMTYPE : STRING\n       PRIMTYPE : DOUBLE\n       PRIMTYPE : CHARACTER\n       PRIMTYPE : FLOAT\n       PRIMTYPE : VOIDCLASSTYPE : ID ARRTYPE : INT OPENBRACKET CLOSEBRACKET\n       ARRTYPE : CLASSTYPE OPENBRACKET CLOSEBRACKETPARAMERERLIST : TYPE ID DD : COMMA TYPE ID D\n       D : EMPTYARGUMENTLIST : EXPRESSION EE : COMMA EXPRESSION\n       E : EMPTYREFERENCE : THIS G\n       REFERENCE : ID G G : DOT ID G\n       G : EMPTYSTATEMENT : OPENAKOL H CLOSEAKOL\n       STATEMENT : TYPE ID ASSIGN EXPRESSION SEMI\n       STATEMENT : REFERENCE OPENBRACKET EXPRESSION CLOSEBRACKET ASSIGN EXPRESSION SEMI\n       STATEMENT : REFERENCE ASSIGN EXPRESSION SEMI\n       STATEMENT : REFERENCE OPENPAR CLOSEPAR SEMI\n       STATEMENT : REFERENCE OPENPAR ARGUMENTLIST CLOSEPAR SEMI\n       STATEMENT : IF OPENPAR EXPRESSION CLOSEPAR STATEMENT ELSE STATEMENT\n       STATEMENT : IF OPENPAR EXPRESSION CLOSEPAR STATEMENT\n       STATEMENT : FOR OPENPAR EXPRESSION CLOSEPAR STATEMENT\n       STATEMENT : WHILE OPENPAR EXPRESSION CLOSEPAR STATEMENTH : STATEMENT H\n       H : EMPTYEXPRESSION : TRUE\n       EXPRESSION : FALSE\n       EXPRESSION : NULL\n       EXPRESSION : NEW ID OPENPAR CLOSEPAR\n       EXPRESSION : NEW INT OPENBRACKET EXPRESSION CLOSEBRACKET\n       EXPRESSION : NEW ID OPENBRACKET EXPRESSION CLOSEBRACKET\n       EXPRESSION : OPENPAR EXPRESSION CLOSEPAR\n       EXPRESSION : EXPRESSION OP EXPRESSION\n       EXPRESSION : EXPRESSION OP EXPRESSION SEMI\n       EXPRESSION : NUMBER\n       EXPRESSION : REFERENCE OPENPAR ARGUMENTLIST CLOSEPAR\n       EXPRESSION : REFERENCE OPENPAR CLOSEPAR\n       EXPRESSION : REFERENCE OPENBRACKET EXPRESSION CLOSEBRACKET\n       EXPRESSION : REFERENCE\n       EXPRESSION : REFERENCE ASSIGN REFERENCE SEMI REFERENCE OP REFERENCE SEMI I\n       EXPRESSION : REFERENCE ASSIGN NUMBER SEMI REFERENCE OP NUMBER SEMI I\n       EXPRESSION : REFERENCE ASSIGN NUMBER SEMI REFERENCE OP REFERENCE SEMI IOP : LESSEQUAL\n          | ASSIGN\n          | EQUALS\n          | GREATEREQUAL\n          | GREATERTHAN\n          | LESSTHAN\n          | ADD\n          | MINUS\n          | MULT\n          | NOTEQUAL\n          | DIVIDE\n          | PEQUAL\n          | MEQUAL\n          | PLUSPLUSI : REFERENCE OP\n       | REFERENCE OP NUMBER\n       | REFERENCE OP REFERENCE'
    
_lr_action_items = {'CLASS':([0,3,30,],[5,5,-4,]),'$end':([0,1,2,3,4,6,30,],[-21,0,-1,-21,-3,-2,-4,]),'ID':([5,8,9,11,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,34,35,36,39,40,41,42,43,46,48,50,51,52,54,56,63,67,70,72,73,76,77,78,79,80,81,83,84,85,87,90,95,98,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,129,130,131,134,135,138,140,141,142,146,149,150,156,157,158,160,161,162,163,170,171,173,178,179,180,181,185,186,187,192,],[7,9,-32,9,9,33,9,9,-18,-19,-20,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,9,-17,-16,-8,9,-15,-34,-33,49,51,51,-32,51,51,75,9,86,51,89,-12,89,89,89,89,89,89,107,89,-11,-45,89,127,89,89,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,89,89,89,-48,-49,89,51,51,51,-10,89,89,-46,89,-50,-52,-53,-54,-9,89,89,51,-47,-51,89,89,89,89,89,89,]),'OPENAKOL':([7,45,47,48,50,52,54,70,87,134,135,140,141,142,156,158,160,161,162,173,178,179,],[8,48,50,52,52,52,52,52,-45,-48,-49,52,52,52,-46,-50,-52,-53,-54,52,-47,-51,]),'CLOSEAKOL':([8,10,11,12,13,31,32,39,48,50,52,53,54,55,65,69,70,71,73,74,85,87,88,111,134,135,144,146,156,158,160,161,162,163,178,179,],[-21,30,-21,-21,-7,-5,-6,-8,-21,-21,-21,73,-21,-14,85,87,-21,-56,-12,-13,-11,-45,-55,146,-48,-49,163,-10,-46,-50,-52,-53,-54,-9,-47,-51,]),'STATIC':([8,11,12,15,18,19,39,73,85,146,163,],[16,16,16,34,-19,-20,-8,-12,-11,-10,-9,]),'PUBLIC':([8,11,12,39,73,85,146,163,],[18,18,18,-8,-12,-11,-10,-9,]),'PRIVATE':([8,11,12,39,73,85,146,163,],[19,19,19,-8,-12,-11,-10,-9,]),'INT':([8,11,12,15,16,18,19,34,39,40,48,50,52,54,63,70,73,85,87,95,134,135,140,141,142,146,156,158,160,161,162,163,173,178,179,],[23,23,23,23,23,-19,-20,23,-8,23,23,23,23,23,23,23,-12,-11,-45,128,-48,-49,23,23,23,-10,-46,-50,-52,-53,-54,-9,23,-47,-51,]),'BOOLEAN':([8,11,12,15,16,18,19,34,39,40,48,50,52,54,63,70,73,85,87,134,135,140,141,142,146,156,158,160,161,162,163,173,178,179,],[24,24,24,24,24,-19,-20,24,-8,24,24,24,24,24,24,24,-12,-11,-45,-48,-49,24,24,24,-10,-46,-50,-52,-53,-54,-9,24,-47,-51,]),'STRING':([8,11,12,15,16,18,19,34,39,40,48,50,52,54,63,70,73,85,87,134,135,140,141,142,146,156,158,160,161,162,163,173,178,179,],[25,25,25,25,25,-19,-20,25,-8,25,25,25,25,25,25,25,-12,-11,-45,-48,-49,25,25,25,-10,-46,-50,-52,-53,-54,-9,25,-47,-51,]),'DOUBLE':([8,11,12,15,16,18,19,34,39,40,48,50,52,54,63,70,73,85,87,134,135,140,141,142,146,156,158,160,161,162,163,173,178,179,],[26,26,26,26,26,-19,-20,26,-8,26,26,26,26,26,26,26,-12,-11,-45,-48,-49,26,26,26,-10,-46,-50,-52,-53,-54,-9,26,-47,-51,]),'CHARACTER':([8,11,12,15,16,18,19,34,39,40,48,50,52,54,63,70,73,85,87,134,135,140,141,142,146,156,158,160,161,162,163,173,178,179,],[27,27,27,27,27,-19,-20,27,-8,27,27,27,27,27,27,27,-12,-11,-45,-48,-49,27,27,27,-10,-46,-50,-52,-53,-54,-9,27,-47,-51,]),'FLOAT':([8,11,12,15,16,18,19,34,39,40,48,50,52,54,63,70,73,85,87,134,135,140,141,142,146,156,158,160,161,162,163,173,178,179,],[28,28,28,28,28,-19,-20,28,-8,28,28,28,28,28,28,28,-12,-11,-45,-48,-49,28,28,28,-10,-46,-50,-52,-53,-54,-9,28,-47,-51,]),'VOID':([8,11,12,15,16,18,19,34,39,40,48,50,52,54,63,70,73,85,87,134,135,140,141,142,146,156,158,160,161,162,163,173,178,179,],[29,29,29,29,29,-19,-20,29,-8,29,29,29,29,29,29,29,-12,-11,-45,-48,-49,29,29,29,-10,-46,-50,-52,-53,-54,-9,29,-47,-51,]),'OPENBRACKET':([9,21,23,51,57,61,66,68,82,86,89,97,109,127,128,],[-32,37,38,-21,76,-21,-42,-44,-41,-21,-21,130,-43,149,150,]),'SEMI':([33,61,66,68,82,86,89,91,92,93,94,96,97,100,101,108,109,113,114,115,116,117,118,119,120,121,122,123,124,125,126,132,136,145,147,152,154,155,164,165,168,169,172,174,175,182,183,184,189,190,191,192,193,194,],[39,-21,-42,-44,-41,-21,-21,111,-57,-58,-59,-66,-70,134,135,144,-43,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,156,158,-63,164,-68,170,171,-65,-60,-67,-69,178,-62,-61,185,186,187,-71,-73,-72,-88,-90,-89,]),'OPENPAR':([33,51,57,58,59,60,61,66,68,72,76,77,78,79,80,81,82,84,86,89,90,97,98,109,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,129,130,138,149,150,157,],[40,-21,78,79,80,81,-21,-42,-44,90,90,90,90,90,90,90,-41,90,-21,-21,90,129,90,-43,90,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,148,90,90,90,90,90,90,]),'CLOSEBRACKET':([37,38,61,66,68,82,86,89,92,93,94,96,97,99,109,113,114,115,116,117,118,119,120,121,122,123,124,125,126,145,147,152,153,164,165,166,167,168,169,174,175,189,190,191,192,193,194,],[42,43,-21,-42,-44,-41,-21,-21,-57,-58,-59,-66,-70,133,-43,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-63,-64,-68,169,-65,-60,174,175,-67,-69,-62,-61,-71,-73,-72,-88,-90,-89,]),'CLOSEPAR':([40,44,49,61,62,64,66,68,78,82,86,89,92,93,94,96,97,102,103,104,105,106,107,109,110,113,114,115,116,117,118,119,120,121,122,123,124,125,126,129,137,139,143,145,147,148,151,152,159,164,165,168,169,174,175,189,190,191,192,193,194,],[45,47,-21,-21,-35,-37,-42,-44,101,-41,-21,-21,-57,-58,-59,-66,-70,136,-21,140,141,142,-21,-43,145,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,152,-38,-40,-36,-63,-64,165,168,-68,-39,-65,-60,-67,-69,-62,-61,-71,-73,-72,-88,-90,-89,]),'IF':([48,50,52,54,70,87,134,135,140,141,142,156,158,160,161,162,173,178,179,],[58,58,58,58,58,-45,-48,-49,58,58,58,-46,-50,-52,-53,-54,58,-47,-51,]),'FOR':([48,50,52,54,70,87,134,135,140,141,142,156,158,160,161,162,173,178,179,],[59,59,59,59,59,-45,-48,-49,59,59,59,-46,-50,-52,-53,-54,59,-47,-51,]),'WHILE':([48,50,52,54,70,87,134,135,140,141,142,156,158,160,161,162,173,178,179,],[60,60,60,60,60,-45,-48,-49,60,60,60,-46,-50,-52,-53,-54,60,-47,-51,]),'RETURN':([48,50,53,54,55,65,74,87,134,135,156,158,160,161,162,178,179,],[-21,-21,72,-21,-14,84,-13,-45,-48,-49,-46,-50,-52,-53,-54,-47,-51,]),'THIS':([48,50,52,54,70,72,76,77,78,79,80,81,84,87,90,98,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,129,130,131,134,135,138,140,141,142,149,150,156,157,158,160,161,162,170,171,173,178,179,180,181,185,186,187,192,],[61,61,61,61,61,61,61,61,61,61,61,61,61,-45,61,61,61,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,61,61,61,-48,-49,61,61,61,61,61,61,-46,61,-50,-52,-53,-54,61,61,61,-47,-51,61,61,61,61,61,61,]),'COMMA':([49,61,66,68,82,86,89,92,93,94,96,97,103,107,109,113,114,115,116,117,118,119,120,121,122,123,124,125,126,145,147,152,164,165,168,169,174,175,189,190,191,192,193,194,],[63,-21,-42,-44,-41,-21,-21,-57,-58,-59,-66,-70,138,63,-43,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-63,-64,-68,-65,-60,-67,-69,-62,-61,-71,-73,-72,-88,-90,-89,]),'DOT':([51,61,86,89,],[67,67,67,67,]),'ASSIGN':([51,57,61,66,68,75,82,86,89,91,92,93,94,96,97,99,100,103,104,105,106,108,109,110,113,114,115,116,117,118,119,120,121,122,123,124,125,126,132,133,145,147,152,153,159,164,165,166,167,168,169,172,174,175,176,177,188,189,190,191,192,193,194,],[-21,77,-21,-42,-44,98,-41,-21,-21,114,-57,-58,-59,-66,131,114,114,114,114,114,114,114,-43,114,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,114,157,-63,114,-68,114,114,-65,-60,114,114,-67,-69,114,-62,-61,114,114,114,-71,-73,-72,-88,-90,-89,]),'LESSEQUAL':([61,66,68,82,86,89,91,92,93,94,96,97,99,100,103,104,105,106,108,109,110,113,114,115,116,117,118,119,120,121,122,123,124,125,126,132,145,147,152,153,159,164,165,166,167,168,169,172,174,175,176,177,188,189,190,191,192,193,194,],[-21,-42,-44,-41,-21,-21,113,-57,-58,-59,-66,-70,113,113,113,113,113,113,113,-43,113,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,113,-63,113,-68,113,113,-65,-60,113,113,-67,-69,113,-62,-61,113,113,113,-71,-73,-72,-88,-90,-89,]),'EQUALS':([61,66,68,82,86,89,91,92,93,94,96,97,99,100,103,104,105,106,108,109,110,113,114,115,116,117,118,119,120,121,122,123,124,125,126,132,145,147,152,153,159,164,165,166,167,168,169,172,174,175,176,177,188,189,190,191,192,193,194,],[-21,-42,-44,-41,-21,-21,115,-57,-58,-59,-66,-70,115,115,115,115,115,115,115,-43,115,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,115,-63,115,-68,115,115,-65,-60,115,115,-67,-69,115,-62,-61,115,115,115,-71,-73,-72,-88,-90,-89,]),'GREATEREQUAL':([61,66,68,82,86,89,91,92,93,94,96,97,99,100,103,104,105,106,108,109,110,113,114,115,116,117,118,119,120,121,122,123,124,125,126,132,145,147,152,153,159,164,165,166,167,168,169,172,174,175,176,177,188,189,190,191,192,193,194,],[-21,-42,-44,-41,-21,-21,116,-57,-58,-59,-66,-70,116,116,116,116,116,116,116,-43,116,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,116,-63,116,-68,116,116,-65,-60,116,116,-67,-69,116,-62,-61,116,116,116,-71,-73,-72,-88,-90,-89,]),'GREATERTHAN':([61,66,68,82,86,89,91,92,93,94,96,97,99,100,103,104,105,106,108,109,110,113,114,115,116,117,118,119,120,121,122,123,124,125,126,132,145,147,152,153,159,164,165,166,167,168,169,172,174,175,176,177,188,189,190,191,192,193,194,],[-21,-42,-44,-41,-21,-21,117,-57,-58,-59,-66,-70,117,117,117,117,117,117,117,-43,117,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,117,-63,117,-68,117,117,-65,-60,117,117,-67,-69,117,-62,-61,117,117,117,-71,-73,-72,-88,-90,-89,]),'LESSTHAN':([61,66,68,82,86,89,91,92,93,94,96,97,99,100,103,104,105,106,108,109,110,113,114,115,116,117,118,119,120,121,122,123,124,125,126,132,145,147,152,153,159,164,165,166,167,168,169,172,174,175,176,177,188,189,190,191,192,193,194,],[-21,-42,-44,-41,-21,-21,118,-57,-58,-59,-66,-70,118,118,118,118,118,118,118,-43,118,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,118,-63,118,-68,118,118,-65,-60,118,118,-67,-69,118,-62,-61,118,118,118,-71,-73,-72,-88,-90,-89,]),'ADD':([61,66,68,82,86,89,91,92,93,94,96,97,99,100,103,104,105,106,108,109,110,113,114,115,116,117,118,119,120,121,122,123,124,125,126,132,145,147,152,153,159,164,165,166,167,168,169,172,174,175,176,177,188,189,190,191,192,193,194,],[-21,-42,-44,-41,-21,-21,119,-57,-58,-59,-66,-70,119,119,119,119,119,119,119,-43,119,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,119,-63,119,-68,119,119,-65,-60,119,119,-67,-69,119,-62,-61,119,119,119,-71,-73,-72,-88,-90,-89,]),'MINUS':([61,66,68,82,86,89,91,92,93,94,96,97,99,100,103,104,105,106,108,109,110,113,114,115,116,117,118,119,120,121,122,123,124,125,126,132,145,147,152,153,159,164,165,166,167,168,169,172,174,175,176,177,188,189,190,191,192,193,194,],[-21,-42,-44,-41,-21,-21,120,-57,-58,-59,-66,-70,120,120,120,120,120,120,120,-43,120,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,120,-63,120,-68,120,120,-65,-60,120,120,-67,-69,120,-62,-61,120,120,120,-71,-73,-72,-88,-90,-89,]),'MULT':([61,66,68,82,86,89,91,92,93,94,96,97,99,100,103,104,105,106,108,109,110,113,114,115,116,117,118,119,120,121,122,123,124,125,126,132,145,147,152,153,159,164,165,166,167,168,169,172,174,175,176,177,188,189,190,191,192,193,194,],[-21,-42,-44,-41,-21,-21,121,-57,-58,-59,-66,-70,121,121,121,121,121,121,121,-43,121,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,121,-63,121,-68,121,121,-65,-60,121,121,-67,-69,121,-62,-61,121,121,121,-71,-73,-72,-88,-90,-89,]),'NOTEQUAL':([61,66,68,82,86,89,91,92,93,94,96,97,99,100,103,104,105,106,108,109,110,113,114,115,116,117,118,119,120,121,122,123,124,125,126,132,145,147,152,153,159,164,165,166,167,168,169,172,174,175,176,177,188,189,190,191,192,193,194,],[-21,-42,-44,-41,-21,-21,122,-57,-58,-59,-66,-70,122,122,122,122,122,122,122,-43,122,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,122,-63,122,-68,122,122,-65,-60,122,122,-67,-69,122,-62,-61,122,122,122,-71,-73,-72,-88,-90,-89,]),'DIVIDE':([61,66,68,82,86,89,91,92,93,94,96,97,99,100,103,104,105,106,108,109,110,113,114,115,116,117,118,119,120,121,122,123,124,125,126,132,145,147,152,153,159,164,165,166,167,168,169,172,174,175,176,177,188,189,190,191,192,193,194,],[-21,-42,-44,-41,-21,-21,123,-57,-58,-59,-66,-70,123,123,123,123,123,123,123,-43,123,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,123,-63,123,-68,123,123,-65,-60,123,123,-67,-69,123,-62,-61,123,123,123,-71,-73,-72,-88,-90,-89,]),'PEQUAL':([61,66,68,82,86,89,91,92,93,94,96,97,99,100,103,104,105,106,108,109,110,113,114,115,116,117,118,119,120,121,122,123,124,125,126,132,145,147,152,153,159,164,165,166,167,168,169,172,174,175,176,177,188,189,190,191,192,193,194,],[-21,-42,-44,-41,-21,-21,124,-57,-58,-59,-66,-70,124,124,124,124,124,124,124,-43,124,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,124,-63,124,-68,124,124,-65,-60,124,124,-67,-69,124,-62,-61,124,124,124,-71,-73,-72,-88,-90,-89,]),'MEQUAL':([61,66,68,82,86,89,91,92,93,94,96,97,99,100,103,104,105,106,108,109,110,113,114,115,116,117,118,119,120,121,122,123,124,125,126,132,145,147,152,153,159,164,165,166,167,168,169,172,174,175,176,177,188,189,190,191,192,193,194,],[-21,-42,-44,-41,-21,-21,125,-57,-58,-59,-66,-70,125,125,125,125,125,125,125,-43,125,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,125,-63,125,-68,125,125,-65,-60,125,125,-67,-69,125,-62,-61,125,125,125,-71,-73,-72,-88,-90,-89,]),'PLUSPLUS':([61,66,68,82,86,89,91,92,93,94,96,97,99,100,103,104,105,106,108,109,110,113,114,115,116,117,118,119,120,121,122,123,124,125,126,132,145,147,152,153,159,164,165,166,167,168,169,172,174,175,176,177,188,189,190,191,192,193,194,],[-21,-42,-44,-41,-21,-21,126,-57,-58,-59,-66,-70,126,126,126,126,126,126,126,-43,126,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,126,-63,126,-68,126,126,-65,-60,126,126,-67,-69,126,-62,-61,126,126,126,-71,-73,-72,-88,-90,-89,]),'TRUE':([72,76,77,78,79,80,81,84,90,98,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,129,130,138,149,150,157,],[92,92,92,92,92,92,92,92,92,92,92,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,92,92,92,92,92,92,]),'FALSE':([72,76,77,78,79,80,81,84,90,98,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,129,130,138,149,150,157,],[93,93,93,93,93,93,93,93,93,93,93,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,93,93,93,93,93,93,]),'NULL':([72,76,77,78,79,80,81,84,90,98,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,129,130,138,149,150,157,],[94,94,94,94,94,94,94,94,94,94,94,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,94,94,94,94,94,94,]),'NEW':([72,76,77,78,79,80,81,84,90,98,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,129,130,138,149,150,157,],[95,95,95,95,95,95,95,95,95,95,95,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,95,95,95,95,95,95,]),'NUMBER':([72,76,77,78,79,80,81,84,90,98,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,129,130,131,138,149,150,157,181,192,],[96,96,96,96,96,96,96,96,96,96,96,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,96,96,155,96,96,96,96,184,194,]),'ELSE':([87,134,135,156,158,160,161,162,178,179,],[-45,-48,-49,-46,-50,173,-53,-54,-47,-51,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'PROGRAM':([0,],[1,]),'Z':([0,3,],[2,6,]),'CLASSDECLARATION':([0,3,],[3,3,]),'EMPTY':([0,3,8,11,12,48,49,50,51,52,54,61,70,86,89,103,107,],[4,4,13,13,13,55,64,55,68,71,55,68,71,68,68,139,64,]),'A':([8,11,12,],[10,31,32,]),'FIELDDECLARATION':([8,11,12,],[11,11,11,]),'METHODDECLARATION':([8,11,12,],[12,12,12,]),'DECLARATORS':([8,11,12,],[14,14,14,]),'C':([8,11,12,],[15,15,15,]),'TYPE':([8,11,12,15,16,34,40,48,50,52,54,63,70,140,141,142,173,],[17,17,17,35,36,41,46,56,56,56,56,83,56,56,56,56,56,]),'PRIMTYPE':([8,11,12,15,16,34,40,48,50,52,54,63,70,140,141,142,173,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'CLASSTYPE':([8,11,12,15,16,34,40,48,50,52,54,63,70,140,141,142,173,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'ARRTYPE':([8,11,12,15,16,34,40,48,50,52,54,63,70,140,141,142,173,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'PARAMERERLIST':([40,],[44,]),'B':([48,50,54,],[53,65,74,]),'STATEMENT':([48,50,52,54,70,140,141,142,173,],[54,54,70,54,70,160,161,162,179,]),'REFERENCE':([48,50,52,54,70,72,76,77,78,79,80,81,84,90,98,112,129,130,131,138,140,141,142,149,150,157,170,171,173,180,181,185,186,187,192,],[57,57,57,57,57,97,97,97,97,97,97,97,97,97,97,97,97,97,154,97,57,57,57,97,97,97,176,177,57,182,183,188,188,188,193,]),'D':([49,107,],[62,143,]),'G':([51,61,86,89,],[66,82,109,66,]),'H':([52,70,],[69,88,]),'EXPRESSION':([72,76,77,78,79,80,81,84,90,98,112,129,130,138,149,150,157,],[91,99,100,103,104,105,106,108,110,132,147,103,153,159,166,167,172,]),'ARGUMENTLIST':([78,129,],[102,151,]),'OP':([91,99,100,103,104,105,106,108,110,132,147,153,159,166,167,172,176,177,188,],[112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,180,181,192,]),'E':([103,],[137,]),'I':([185,186,187,],[189,190,191,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> PROGRAM","S'",1,None,None,None),
  ('PROGRAM -> Z','PROGRAM',1,'p_programm','LexAndYacc.py',88),
  ('Z -> CLASSDECLARATION Z','Z',2,'p_Z','LexAndYacc.py',91),
  ('Z -> EMPTY','Z',1,'p_Z','LexAndYacc.py',92),
  ('CLASSDECLARATION -> CLASS ID OPENAKOL A CLOSEAKOL','CLASSDECLARATION',5,'p_classdeclaration','LexAndYacc.py',95),
  ('A -> FIELDDECLARATION A','A',2,'p_A','LexAndYacc.py',98),
  ('A -> METHODDECLARATION A','A',2,'p_A','LexAndYacc.py',99),
  ('A -> EMPTY','A',1,'p_A','LexAndYacc.py',100),
  ('FIELDDECLARATION -> DECLARATORS ID SEMI','FIELDDECLARATION',3,'p_fielddeclaration','LexAndYacc.py',103),
  ('METHODDECLARATION -> DECLARATORS ID OPENPAR PARAMERERLIST CLOSEPAR OPENAKOL B RETURN EXPRESSION SEMI CLOSEAKOL','METHODDECLARATION',11,'p_methoddeclaration','LexAndYacc.py',106),
  ('METHODDECLARATION -> DECLARATORS ID OPENPAR CLOSEPAR OPENAKOL B RETURN EXPRESSION SEMI CLOSEAKOL','METHODDECLARATION',10,'p_methoddeclaration','LexAndYacc.py',107),
  ('METHODDECLARATION -> DECLARATORS ID OPENPAR PARAMERERLIST CLOSEPAR OPENAKOL B CLOSEAKOL','METHODDECLARATION',8,'p_methoddeclaration','LexAndYacc.py',108),
  ('METHODDECLARATION -> DECLARATORS ID OPENPAR CLOSEPAR OPENAKOL B CLOSEAKOL','METHODDECLARATION',7,'p_methoddeclaration','LexAndYacc.py',109),
  ('B -> STATEMENT B','B',2,'p_B','LexAndYacc.py',113),
  ('B -> EMPTY','B',1,'p_B','LexAndYacc.py',114),
  ('DECLARATORS -> C STATIC TYPE','DECLARATORS',3,'p_declarators','LexAndYacc.py',117),
  ('DECLARATORS -> STATIC TYPE','DECLARATORS',2,'p_declarators','LexAndYacc.py',118),
  ('DECLARATORS -> C TYPE','DECLARATORS',2,'p_declarators','LexAndYacc.py',119),
  ('DECLARATORS -> TYPE','DECLARATORS',1,'p_declarators','LexAndYacc.py',120),
  ('C -> PUBLIC','C',1,'p_C','LexAndYacc.py',124),
  ('C -> PRIVATE','C',1,'p_C','LexAndYacc.py',125),
  ('EMPTY -> <empty>','EMPTY',0,'p_empty','LexAndYacc.py',129),
  ('TYPE -> PRIMTYPE','TYPE',1,'p_type','LexAndYacc.py',132),
  ('TYPE -> CLASSTYPE','TYPE',1,'p_type','LexAndYacc.py',133),
  ('TYPE -> ARRTYPE','TYPE',1,'p_type','LexAndYacc.py',134),
  ('PRIMTYPE -> INT','PRIMTYPE',1,'p_primetype','LexAndYacc.py',137),
  ('PRIMTYPE -> BOOLEAN','PRIMTYPE',1,'p_primetype','LexAndYacc.py',138),
  ('PRIMTYPE -> STRING','PRIMTYPE',1,'p_primetype','LexAndYacc.py',139),
  ('PRIMTYPE -> DOUBLE','PRIMTYPE',1,'p_primetype','LexAndYacc.py',140),
  ('PRIMTYPE -> CHARACTER','PRIMTYPE',1,'p_primetype','LexAndYacc.py',141),
  ('PRIMTYPE -> FLOAT','PRIMTYPE',1,'p_primetype','LexAndYacc.py',142),
  ('PRIMTYPE -> VOID','PRIMTYPE',1,'p_primetype','LexAndYacc.py',143),
  ('CLASSTYPE -> ID','CLASSTYPE',1,'p_classtype','LexAndYacc.py',146),
  ('ARRTYPE -> INT OPENBRACKET CLOSEBRACKET','ARRTYPE',3,'p_arrtype','LexAndYacc.py',149),
  ('ARRTYPE -> CLASSTYPE OPENBRACKET CLOSEBRACKET','ARRTYPE',3,'p_arrtype','LexAndYacc.py',150),
  ('PARAMERERLIST -> TYPE ID D','PARAMERERLIST',3,'p_parameterlist','LexAndYacc.py',153),
  ('D -> COMMA TYPE ID D','D',4,'p_D','LexAndYacc.py',156),
  ('D -> EMPTY','D',1,'p_D','LexAndYacc.py',157),
  ('ARGUMENTLIST -> EXPRESSION E','ARGUMENTLIST',2,'p_argumentlist','LexAndYacc.py',160),
  ('E -> COMMA EXPRESSION','E',2,'p_E','LexAndYacc.py',163),
  ('E -> EMPTY','E',1,'p_E','LexAndYacc.py',164),
  ('REFERENCE -> THIS G','REFERENCE',2,'p_reference','LexAndYacc.py',167),
  ('REFERENCE -> ID G','REFERENCE',2,'p_reference','LexAndYacc.py',168),
  ('G -> DOT ID G','G',3,'p_G','LexAndYacc.py',171),
  ('G -> EMPTY','G',1,'p_G','LexAndYacc.py',172),
  ('STATEMENT -> OPENAKOL H CLOSEAKOL','STATEMENT',3,'p_statement','LexAndYacc.py',175),
  ('STATEMENT -> TYPE ID ASSIGN EXPRESSION SEMI','STATEMENT',5,'p_statement','LexAndYacc.py',176),
  ('STATEMENT -> REFERENCE OPENBRACKET EXPRESSION CLOSEBRACKET ASSIGN EXPRESSION SEMI','STATEMENT',7,'p_statement','LexAndYacc.py',177),
  ('STATEMENT -> REFERENCE ASSIGN EXPRESSION SEMI','STATEMENT',4,'p_statement','LexAndYacc.py',178),
  ('STATEMENT -> REFERENCE OPENPAR CLOSEPAR SEMI','STATEMENT',4,'p_statement','LexAndYacc.py',179),
  ('STATEMENT -> REFERENCE OPENPAR ARGUMENTLIST CLOSEPAR SEMI','STATEMENT',5,'p_statement','LexAndYacc.py',180),
  ('STATEMENT -> IF OPENPAR EXPRESSION CLOSEPAR STATEMENT ELSE STATEMENT','STATEMENT',7,'p_statement','LexAndYacc.py',181),
  ('STATEMENT -> IF OPENPAR EXPRESSION CLOSEPAR STATEMENT','STATEMENT',5,'p_statement','LexAndYacc.py',182),
  ('STATEMENT -> FOR OPENPAR EXPRESSION CLOSEPAR STATEMENT','STATEMENT',5,'p_statement','LexAndYacc.py',183),
  ('STATEMENT -> WHILE OPENPAR EXPRESSION CLOSEPAR STATEMENT','STATEMENT',5,'p_statement','LexAndYacc.py',184),
  ('H -> STATEMENT H','H',2,'p_H','LexAndYacc.py',189),
  ('H -> EMPTY','H',1,'p_H','LexAndYacc.py',190),
  ('EXPRESSION -> TRUE','EXPRESSION',1,'p_expressin','LexAndYacc.py',194),
  ('EXPRESSION -> FALSE','EXPRESSION',1,'p_expressin','LexAndYacc.py',195),
  ('EXPRESSION -> NULL','EXPRESSION',1,'p_expressin','LexAndYacc.py',196),
  ('EXPRESSION -> NEW ID OPENPAR CLOSEPAR','EXPRESSION',4,'p_expressin','LexAndYacc.py',197),
  ('EXPRESSION -> NEW INT OPENBRACKET EXPRESSION CLOSEBRACKET','EXPRESSION',5,'p_expressin','LexAndYacc.py',198),
  ('EXPRESSION -> NEW ID OPENBRACKET EXPRESSION CLOSEBRACKET','EXPRESSION',5,'p_expressin','LexAndYacc.py',199),
  ('EXPRESSION -> OPENPAR EXPRESSION CLOSEPAR','EXPRESSION',3,'p_expressin','LexAndYacc.py',200),
  ('EXPRESSION -> EXPRESSION OP EXPRESSION','EXPRESSION',3,'p_expressin','LexAndYacc.py',201),
  ('EXPRESSION -> EXPRESSION OP EXPRESSION SEMI','EXPRESSION',4,'p_expressin','LexAndYacc.py',202),
  ('EXPRESSION -> NUMBER','EXPRESSION',1,'p_expressin','LexAndYacc.py',203),
  ('EXPRESSION -> REFERENCE OPENPAR ARGUMENTLIST CLOSEPAR','EXPRESSION',4,'p_expressin','LexAndYacc.py',204),
  ('EXPRESSION -> REFERENCE OPENPAR CLOSEPAR','EXPRESSION',3,'p_expressin','LexAndYacc.py',205),
  ('EXPRESSION -> REFERENCE OPENBRACKET EXPRESSION CLOSEBRACKET','EXPRESSION',4,'p_expressin','LexAndYacc.py',206),
  ('EXPRESSION -> REFERENCE','EXPRESSION',1,'p_expressin','LexAndYacc.py',207),
  ('EXPRESSION -> REFERENCE ASSIGN REFERENCE SEMI REFERENCE OP REFERENCE SEMI I','EXPRESSION',9,'p_expressin','LexAndYacc.py',208),
  ('EXPRESSION -> REFERENCE ASSIGN NUMBER SEMI REFERENCE OP NUMBER SEMI I','EXPRESSION',9,'p_expressin','LexAndYacc.py',209),
  ('EXPRESSION -> REFERENCE ASSIGN NUMBER SEMI REFERENCE OP REFERENCE SEMI I','EXPRESSION',9,'p_expressin','LexAndYacc.py',210),
  ('OP -> LESSEQUAL','OP',1,'p_op','LexAndYacc.py',213),
  ('OP -> ASSIGN','OP',1,'p_op','LexAndYacc.py',214),
  ('OP -> EQUALS','OP',1,'p_op','LexAndYacc.py',215),
  ('OP -> GREATEREQUAL','OP',1,'p_op','LexAndYacc.py',216),
  ('OP -> GREATERTHAN','OP',1,'p_op','LexAndYacc.py',217),
  ('OP -> LESSTHAN','OP',1,'p_op','LexAndYacc.py',218),
  ('OP -> ADD','OP',1,'p_op','LexAndYacc.py',219),
  ('OP -> MINUS','OP',1,'p_op','LexAndYacc.py',220),
  ('OP -> MULT','OP',1,'p_op','LexAndYacc.py',221),
  ('OP -> NOTEQUAL','OP',1,'p_op','LexAndYacc.py',222),
  ('OP -> DIVIDE','OP',1,'p_op','LexAndYacc.py',223),
  ('OP -> PEQUAL','OP',1,'p_op','LexAndYacc.py',224),
  ('OP -> MEQUAL','OP',1,'p_op','LexAndYacc.py',225),
  ('OP -> PLUSPLUS','OP',1,'p_op','LexAndYacc.py',226),
  ('I -> REFERENCE OP','I',2,'p_I','LexAndYacc.py',231),
  ('I -> REFERENCE OP NUMBER','I',3,'p_I','LexAndYacc.py',232),
  ('I -> REFERENCE OP REFERENCE','I',3,'p_I','LexAndYacc.py',233),
]
